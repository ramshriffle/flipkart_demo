c
params[:id]
c
@address
c
s
subject.body
c
subject.body
c
n
addresses = @current_user.addresses.all
@current_user.addresses.all
@current_user
c
address.user
address
user
c
subject.body
c
@user
user
c
subject.body
c
subject.body
c
expect(subject.body). to eq("Email not found, check your email")c
expect(subject.body). to eq("Email not found, check your email")
expect(subject).to have_http_status(404)
c
n
c
expect(subject.body). to eq("otp successfully generated for login")
c
JSON.parse(subject.body)
subject.body
c
n
c
subject.body
c
user
n
c
user
c
subject.body
c
subject.body
c
user
n
user
c
user
c
user
use
subject.body
c
subject.body
c
n
c
n
c
subject.body
user
c
user
n
c
user
c
user
n
c
user
c
user
user.update(verified:true)
user
user.update(name:'ram')
user
c
subject.body
c
subject.body
c
subject.body
c
n
c
JSON.parse(subject.body)
c
subject.body
JSON.parse(subject.body)
c
c\
JSON.parse(subject.body)
c
expect(JSON.parse(subject.body)). to eq({"message"=>"login successfully", "token"=>token})
c
n
c
expect(JSON.parse(subject.body)). to eq({"message"=>"please check your email or password"})
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
subject.body
c
expect(JSON.parse(subject.body)). to eq({"message"=>"login successfully", "token"=>jwt_encode(user_id: user.id)})
JSON.parse(subject.body)
c
token
user
c
token
user.token
JSON.parse(subject.body)
c
subject.body
c
params[:email]
c
subject.body
c
user
c
subject.body
c
params[:email]
c
params[:email]
c
user
c
user
User
params[:email]
c
user.password
user.passwor
user.email
subject.body
c
JSON.parse(subject.body)
c
CartItem.all
Cart.all
cart
cart_item
cart_items
cart
user_c
JSON.parse(subject.body)
c
expect(JSON.parse(subject.body)).to eq({"message"=>"Cart is empty"})
c
expect(JSON.parse(subject.body)).to eq(["Cart is empty"])
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
subject.body
c
product
User.all
cart_item
subject.body
c
expect( JSON.parse(subject.body)).to eq(["Quantity must be greater than or equal to 1"])
c
JSON.parse(subject.body)
c
n
c
@cart_item.errors.full_messages
@cart_item
n
c
cart_item
c
subject.body
c
cart_item_params
c
subject.body
c
cart_item_params
c
@current_user.cart_items.find_by_id(params[:id])
@current_user.cart_items.find_by_id(params[:id]
c
cart_item_params
c
params[:id]
c
response.quantity
subject.quantity
subject.body
cart_item.quantity
expect(cart_item.quantity).to eq 15
c
JSON.parse(cart_item.quantity)
JSON.parse(cart_item.quanatity)
expect(cart_item.quantity).to eq(15)
c
expect(CartItem.count).to eq(0)
c
response.body
response
quantity
cart_item.quantity
subject.quantity
c
JSON.parse(subject.body)
subject.body
c
cart_item_params
c
@cart_item = @current_user.cart_items.find_by_id(params[:id])
params[:id]
c
quantity
c
subject.body
c
expect(JSON.parse(subject.body)).to eq("message"=>"Cart item removed successfully")
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
expect(subject).to have_http_status(200)
c
JSON.parse(subject.body)
c
product
c
params[:product_id]
c
params[:product_id]
c
 @cart_item = @current_user.cart_items.find_by_id(params[:id])
params[:id]
c
subject.body
c
subject.body
