c
@current_user.cart_items
@current_user.cart_item
order
order = @current_user.orders.new(order_params)
@current_user.orders.new(order_params)
order_params
c
  Rails.application.routes.url_helpers.rails_blob_url(image, only_path: true) if object.image.attached?
image
c
n
@product.nil?
return render json: 'Product not found' if @product.nil?
@product = @current_user.products.find_by_id(params[:id])
c
product_params
c
product_params
c
product_params
c
@product.nil?
@product = @current_user.products.find_by_id(params[:id])
@product.nil?
@current_user.products.find_by_id(params[:id])
params[:id]
c
product_params
c
product_params
c
product_params
c
product_params
c
product_params
c
user_profile_paramuser_profile_param
c
user&.authenticate(params[:password]) && ( user.verified == true )
user.verified == true
c
user = User.find_by_email(params[:email])
c
self.otp = SecureRandom.hex(3)
c
super
user.otp
self.otp = SecureRandom.hex(3)
SecureRandom.hex(3)
c
user.generate_otp
c
SecureRandom.hex(3)
c
user.generate_otp
user = User.find_by_email(params[:email])
c
user.generate_otp
user = User.find_by_email(params[:email])
user.generate_otp
params[:email]
User.find_by_email(params[:email])
c
JWT.encode(payload, SECRET_KEY)
JWT.encode
payload[:exp] = exp.to_i
payload[:exp]
exp.to_i
payload[:exp]
c
jwt_encode(user_id: user.id)
jwt_encode
wt_encode
c
jwt_encode(user_id: user.id)
c
jwt_encode(user_id: user.id)
token
c
jwt_encode(user_id: user.id)
user&.authenticate(params[:password])
User.find_by_email(params[:email])
params
user
