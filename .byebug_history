c
expect(subject).to change(User, count).by(-1)
c
subject.body
c
subject.stacktrace
subject.body
c
expect(JSON.parse(subject.body)).to eq({"message"=>"Address not found"})
c
JSON.parse(subject.body)
c
params
c
n
c
JSON.parse(subject.body)
subject.body
c
subject.body
c
params
c
expect(response).to have_http_status(:not_found)
c
response.body
respose.body
subject.body
c
subject.body
c
subject.body
c
subject.body
c
subject.body
params
c
user
product
product.id
params
subject.body
c
JSON.parse(subject.body)
subject.body
c
expect(subject.body).to eq('otp successfully generated for login')
 expect(subject).to have_http_status(200)
c
n
user
n
c
user
c
params
c
n
User.find_by(otp: params[:otp])
params[:otp]
c
(otp_sent_at + 1.hour) > Time.now.utc
n
User.find_by(otp: params[:otp])
c
user.present?
User.find_by(otp: params[:otp])
params[:otp]
User.find_by(otp: params[:otp])
c
user
c
User.find_by(otp: params[:otp])
params[:otp]
user.present?
n
c
n
c
v
c
expect(JSON.parse(subject.body)).to eq({"error"=>"otp is not valid or expired. try again"})
c
JSON.parse(subject.body)c
JSON.parse(subject.body)
c
n
c
JSON.parse(subject.body)
subject.body
c
subject.body
c
n
c
n
c
n
c
n
c
JSON.parse(subject.body)
subject.body
c
subject.body
JSON.parse(subject.body)
c
JSON.parse(subject.body)
subject.body
c
expect(subject).to have_http_status(422)
subject.body
c
cart_item
n
quantity
quantity = cart_item.quantity + params[:quantity].to_i
c
expect(subject).to have_http_status(200)
c
params[:quantity].to_i
c
params[:quantity]
c
params[:quantity]
cart_item.quantity
c
n
cart_item
cart_item = @current_user.cart_items.find_by_product_id(params[:product_id])
@current_user.cart_items.find_by_product_id(params[:product_id])
c
n
c
nc
n
params[:product_id]
c
product
c
JSON.parse(subject.body)
JSON.body(subject.body)
subject.body
c
expect(JSON.parse(subject.body)).to eq(["Address must exist"])
expect(subject.body).to eq(["Address must exist"])
expect(subject).to have_http_status(422)
subject.body
JSON.parse(subject.body)
c
JSON.parse(subject.body)
subject.body
c
expect(subject).to have_http_status(404)
expect(subject.body).to eq("Cart is empty")
subject.body
c
expect(subject.body).to eq("Cart is empty")
expect(subject).to have_http_status(404)
c
subject.body
expect(subject).to have_http_status(422)
c
OrderItem.all
CartItem.all
CartItem
cart_item
CartItem.all
Cart.all
OrderItem.all
order_item
product
cart
order
cart_item
subject.body
c
subject.body
c
orders
n
c
subject.body
c
orders
n
c
subject.body
c
subject.body
c
subject.body
params
c
subject.body
c
subject.body
expect(subject).to have_http_status(200)
c
expect(subject).to have_http_status(404)
expect(subject).to have_http_status(200)
expect(subject.body).to eq("Product not found")
subject.body
c
subject.body
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
@current_user.products.all
@current_user.products
@current_user
c
product
user
c
JSON.parse(subject.body)
product
user 
c
JSON.parse(subject.body)
product
user 
c
Product.all
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
expect(subject).to have_http_status(422)
c
expect(subject).to have_http_status(422)
c
expect(subject).to have_http_status(201)
expect(subject).to have_http_status(200)
c
expect(subject).to have_http_status(200)
c
expect(subject).to have_http_status(200)
 expect(@user.otp).to be_nil
expect(@user.verified).to be(true)
expect(@user.otp).to be_nil
c
expect(@user.valid_otp).to be false
c
(otp_sent_at + 1.hour) > Time.now.utc
otp_sent_at
c
@user
